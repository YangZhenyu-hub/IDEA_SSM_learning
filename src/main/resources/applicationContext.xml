<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!-- Spring配置文件的核心点（数据源、与mybatis的整合，事务控制） -->


    <!--============组件扫描============-->
    <context:component-scan base-package="com.yzy.ssm">
        <!--扫描除了控制器的组件，控制器组件交给SpringMVC进行扫描-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--=============Spring配置文件：主要配置和业务逻辑相关的==============-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />

        <property name="filters" value="stat" />

        <property name="maxActive" value="20" />
        <property name="initialSize" value="1" />
        <property name="maxWait" value="6000" />
        <property name="minIdle" value="1" />

        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <property name="poolPreparedStatements" value="true" />
        <property name="maxOpenPreparedStatements" value="20" />

        <property name="asyncInit" value="true" />
    </bean>

    <!--=============配置与MyBatis的整合==============-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--指定mybatis全局配置文件的位置-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="dataSource" ref="dataSource"/>
        <!--指定mybatis mapper文件的位置-->
        <property name="mapperLocations" value="classpath:com/yzy/ssm/mapper/*.xml"/>
    </bean>

    <!--配置扫描器，将mybatis接口的实现加入到容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--扫描所有dao(mapper)接口的实现，加入到ioc容器中-->
        <property name="basePackage" value="com.yzy.ssm.mapper"/>
    </bean>

    <!--配置一个可以执行批量的sqlSession-->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <!--构造器参数-->
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
        <!--batch可批量执行-->
        <constructor-arg name="executorType" value="BATCH"/>
    </bean>

    <!--===================================================================-->

    <!--==================事务控制的配置==================-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--控制数据源-->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--开启基于注解的事务，使用xml配置形式的事务（必要主要的都是使用配置式的）-->
    <aop:config>
        <!--切入点表达式，*（权限修饰符 public）com.yzy.ssm.service..（service包下的所有类）*(..) （所有方法，所有参数）-->
        <aop:pointcut id="txPoint" expression="execution(* com.yzy.ssm.service..*(..))"/>
        <!--配置事务的增强-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
    </aop:config>

    <!--配置事务增强，事务如何切入-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--所有方法都是事务方法-->
            <tx:method name="*"/>
            <!--以get方法开始的所有方法，read-only进行优化-->
            <tx:method name="get" read-only="true"/>
        </tx:attributes>
    </tx:advice>
</beans>